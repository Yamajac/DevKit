;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   RainManager - Yamajac, /u/Yamatjac, @Yamajac#3141, CharlotteConnolly@yamajac.com
;   
;   It's like the Rainmeter Manage window except less functional and less efficient.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; All the boring shit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Rainmeter]
Update = 1000
DefaultUpdateDivider = -1
DynamicWindowSize    = 1
AccurateText         = 1
[Metadata]
Name        = RainManager
Author      = Yamajac - /u/Yamatjac
Information = The Rainmeter Manage window but worse
Version     = Alpha


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The fun shit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Change the file to your rainmeter settings file. If you don't do this it won't work.
; Unless your name is also Charlotte, in which case you're good.
; Change UpdateDivider to a bigger number if it's causing lag.
; It MIGHT be laggy if your settings file is thousands of skins large.
; But probably not.
[RainmeterSettings]
Measure  = WebParser
URL      = file://C:\Users\Charlotte\AppData\Roaming\Rainmeter\Rainmeter.ini
CodePage = 1200
RegExp   = (?s)(.*)
UpdateDivider  = 5
UpdateRate     = 1
FinishAction   = [!UpdateMeasure FuckShitUp][!UpdateMeter Show][!Redraw]

; WebParser is actually bad at parsing the web so we use a string measure
; instead and delete all the stuff we don't want.
; We need to deal with spaces somehow probably since it might mess up the text wrapping
; But I did that and then realized it's actually harder to do than I thought
; And spaces haven't caused a problem yet so ayyyyy
; yolo
[FuckShitUp]
Measure = String
String = [RainmeterSettings]
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = "(?s).*?(\[[^\n]*?\])..Active=1" : "\1", "(?s)([^\n]*]).*" : "\1", "\[(.*?)]" : "\1#CRLF#"


; Grabs the Nth skin where N is the measure's MinValue
; Somehow undo the space deleting from above whenever we do that
[ClickedConfig]
Measure = String
String  = [FuckShitUp]
MinValue = [GetMouseY]
DynamicVariables = 1
RegExpSubstitute = 1
Substitute       = "(?s)([^\n]*?\n){0,[ClickedConfig:MinValue]}([^\n]*?)\n.*" : "\2"


; Draw the title and the actual stuff
; Probably gonna wanna set a maximum height on the stuff and add scrolling through configs.
; Maybe even sort them by suite later on.
; But I don't usually have more than 5-10 skins open at a time
; So this is fine for me for now.
[Title]
Meter = string
Text  = Active Configs:
Fontcolor    = 155,147,201,255
FontFace     = Cormac-ExtraLight
StringStyle  = Bold
SolidColor   = 0,0,0,1
FontSize     = 15
[Show]
Meter = string
text  = [FuckShitUp]
X     = 10
Y     = 30r
FontFace   = Cormac-ExtraLight
FontColor  = 155,147,201,255
SolidColor = 0,0,0,1
FontSize   = 12
DynamicVariables  = 1
; This converts the mouse's Y coordinates to the line clicked on
; If you use a bigger font, you need to change the 18 
; Later on I'll programmatically determine the lineheight but I need to figure out
; a good way to count the number of active skins first. Which I might never do.
; It's easy to do it in a bad way though.
LeftMouseUpAction = [!SetVariable MouseY "($MouseY$ / 18)"][!UpdateMeasureGroup Mousers][!UpdateMeasure ClickedConfig][!Refresh [ClickedConfig]]
RightMouseUpAction = [!SetVariable MouseY "($MouseY$ / 18)"][!UpdateMeasureGroup Mousers][!UpdateMeasure ClickedConfig][!DeactivateConfig [ClickedConfig]][!UpdateMeasure RainmeterSettings]


; This converts the 3.233772 that we get into something usable in an 'array'
; Then it grabs the value of that element from the ClickedConfig 'array'
; Then it refreshes that config.
[GetMouseY]
Measure  = Calc
Group    = Mousers | NoUpdate
Disabled = 1
Formula  = (Ceil(#MouseY#) - 1) = -1 ? 0 : (Ceil(#MouseY#) - 1)
DynamicVariables = 1

; Something every skin needs. Enables the previously disabled measures and disables itself.
; Allows you to have OnUpdateActions not get fired on loading very very easily.
[NoUpdate]
Measure = Calc
OnUpdateAction = [!EnableMeasureGroup NoUpdate][!DisableMeasure NoUpdate]

